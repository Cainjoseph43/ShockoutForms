{"name":"Shockout SP Forms","tagline":"A Modern SharePoint Form Framework Featuring SharePoint Services + Knockout Data Binding","body":"# Shockout SP Forms\r\n###SharePoint + Knockout MVVM forms - an InfoPath and XSL Form Replacement (and Vast Improvement)\r\n\r\nForget the frustrations of legacy InfoPath and XSL SharePoint form development. Leverage the power of Knockout's databinding plus SharePoint's REST services to create modern and truly dynamic web forms.\r\n\r\n###Compatibilty\r\nCompatible with SharePoint 2010 and 2013, Foundation, Standard, and Enterprise.\r\n\r\n####Dependencies: \r\njQuery 1.72+, jQuery UI<any>, KnockoutJS 3.2+\r\n\r\n##Mobile First\r\nShockout SP Forms is built on the philosophy of Responsive Design and Mobile First. Therefore, the framework's built-in templates utilize Bootstrap CSS. You're encouraged to become familiar with Boostrap CSS and implement the classes in your own form controls. Download Boostrap at http://getbootstrap.com, or use the CDN (Content Delivery Network) links below. See the Knockout HTML form control samples below which include the Boostrap CSS classes.\r\n\r\n##About Knockout JS MVVM (Model View View Model)\r\nYou must be familiar with the Knockout JS MVVM framework syntax, but there are form control samples below that you can copy and paste in order to get you started building Shockout forms with a minimal learning curve. Visit http://knockoutjs.com if you need an introduction or refresher.\r\n\r\nKnockout utilizes the Observer/Observable design pattern which means that many objects can \"observe\" another object - called an \"observable.\" This means when the value of an observable changes, all observers will react to the change. A practical example of this behavior is with Excel formula cells - the calculation updates immediately after another variable in the formula changes. \r\n\r\n###Rules\r\nIf you've spent any time implementing rules in InfoPath, you have probably become frustrated with the interface to manage those rules. Rules with XSL forms? Forget it unless you're prepared to hack your form to death with jQuery selectors and event handlers. With Knockout's directives, you can embed the functionality of rules in an HTML element with the data-bind attribute. For example, do you need to show an element based on the selected option of a select element?\r\n```\r\n<label>What is your favorite color?</label>\r\n<select data-bind=\"value: color, optionsCaption: 'Select your favorite color...'\">\r\n\t<option>Red</option>\r\n\t<option>Blue</option>\r\n\t<option>Green</option>\r\n</select>\r\n<!-- The div element below is hidden until `color == 'Red'` -->\r\n<div data-bind=\"visible: color() == 'Red'\">What a coincidence. Red is my favorite color too!</div>\r\n```\r\n\r\n#### Usage\r\n```\r\n// These are included in the sample Master page provided - Shockout.SpForms.master\r\n<!-- Bootstrap CSS (in head)-->\r\n<link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css\" rel=\"stylesheet\" type=\"text/css\" />\r\n\r\n<!-- jQuery UI CSS (in head)-->\r\n<link href=\"//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css\" rel=\"stylesheet\" type=\"text/css\" />\r\n\r\n<!-- It's recommended to place your scripts at the bottom of the page, before the ending </body> tag, for faster page loads. -->\r\n\r\n<!-- jQuery -->\r\n<script src=\"//code.jquery.com/jquery-1.11.3.min.js\" type=\"text/javascript\"></script>\r\n<script src=\"//code.jquery.com/ui/1.11.4/jquery-ui.min.js\" type=\"text/javascript\"></script>\r\n\r\n<!-- Bootstrap -->\r\n<script src=\"//maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js\" type=\"text/javascript\"></script>\r\n\r\n<!-- Knockout JS -->\r\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/knockout/3.3.0/knockout-min.js\" type=\"text/javascript\"></script>\r\n\r\n<!-- Shockout SPForms -->\r\n<script src=\"ShockoutForms-0.0.1.min.js\" type=\"text/javascript\"></script>\r\n\r\n<!-- Setup your form - this goes at the bottom of your form's page -->\r\n<script type=\"text/javascript\">\r\n(function(){\r\n\tvar spForm = new Shockout.SPForm(\r\n\t\t/*listName:*/ 'My SharePoint List Name', \r\n\t\t/*formId:*/ 'my-form-ID', \r\n\t\t/*options:*/ {\r\n\t\t\tdebug: false, // default false\r\n\t\t\tpreRender: function(spForm){}, // default undefined\r\n\t\t\tpostRender: function(spForm){}, // default undefined\r\n\t\t\tpreSave: function(spForm){}, // default undefined\t\r\n\t\t\tallowDelete: false, // default false\r\n\t\t\tallowPrint: true, // default true\r\n\t\t\tallowSave: true, // default true\r\n\t\t\tallowedExtensions: ['txt', 'rtf', 'zip', 'pdf', 'doc', 'docx', 'jpg', 'gif', 'png', 'ppt', 'tif', 'pptx', 'csv', 'pub', 'msg'],  // the default \r\n\t\t\tattachmentMessage: 'An attachment is required.', // the default\r\n\t\t\tconfirmationUrl: '/SitePages/Confirmation.aspx', // the default\r\n\t\t\tenableErrorLog: true, // default true\r\n\t\t\terrorLogListName: 'Error Log', // Designated SharePoint list for logging user and form errors; Requires a custom SP list named 'Error Log' on root site with fields: 'Title' and 'Error'\r\n\t\t\tfileHandlerUrl: '/_layouts/SPFormFileHandler.ashx',  // the default    \r\n\t\t\tenableAttachments: true, // default true\r\n\t\t\tincludeUserProfiles: true, // default true\r\n\t\t\tincludeWorkflowHistory: true, // default true        \r\n\t\t\trequireAttachments: false, // default false\r\n\t\t\tsiteUrl: '', // default       \r\n\t\t\tworkflowHistoryListName: 'Workflow History' // the default\r\n\t\t});\r\n\r\n})();\r\n</script>\r\n```\r\n\r\n###Attachments\r\nTo enable attachments for your forms, ensure the `enableAttachments` option is `true` (the default) and include at least one element within your form with the class name \"attachments\". Shockout will place everything inside the element(s).\r\n```\r\n<section class=\"attachments\"></section>\r\n```\r\n\r\nI've written a generic handler (.ashx) for attaching documents to your list items. Be sure to copy `SPFormFileHandler.ashx` from the `_layouts` directory of this project to the LAYOUTS directory of your SharePoint front-end server. The URI will be `http://<mysite.com>/_layouts/SPFormFileHandler.ashx`; the server directory is `C:\\Program Files\\Common Files\\microsoft shared\\Web Server Extensions\\14\\TEMPLATE\\LAYOUTS\\SPFormFileHandler.ashx` - even for SP 2013. My goal for the near future is to eliminate dependency on this generic handler for those using Office 365. It's doubtful that users of Office 365 have permissions to copy files to their LAYOUTS directory. Since modern browsers now convert file uplaods to base64 strings, it's possible to send attachments to list items via SharePoint's SOAP API.\r\n\r\nAlso ensure your SharePoint list has attachments enabled. Shockout will detect this setting and render attachments based on your SP list settings.\r\n\r\n###Show the User Profiles for Created By and Modified By\r\nTo enable this feature, ensure that `includeUserProfiles` is `true` (the default) include an element with the class name \"created-info\". \r\nShockout will query the User Information List or User Profile Service, if you have it, and display user profiles with: picture, full name, job title, email, phone, department, and office.\r\nIf this feature is disabled, Shockout will only show the Created By/Created and Modified By/Modified fields. \r\n```\r\n<section class=\"created-info\" data-edit-only></section>\r\n```\r\n\r\n###SharePoint Field Variable Names\r\nShockout relies on SharePoint REST Services and SP REST Services returns your list's field names in a specific format; basically the current display name, minus spaces and special characters, in \"CamelCase.\"\r\n\r\nThe Shockout framework will map these camel case variable names to an instance of a Knockout view model. You'll use these variable names to create your form's fields.\r\n\r\nTo preview the formatting of your SharePoint list's field names, it's very helpful to use a REST client such as the Advanced REST Client for Google's Chrome browser - https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo\r\n\r\nOnce this application is installed, you can preview the JSON returned by entering the following in the address bar. Your list name must NOT contain spaces and must be in CamelCase\r\n```\r\nhttp://<SiteUrl>/<Subsite>/_vti_bin/listdata.svc/<MyListName>(<ID>)\r\n\r\n// example: https://mysite.com/forms/_vti_bin/listdata.svc/PurchaseRequisitions(1)\r\n```\r\nChoose the GET radio option and enter `Accept: application/json;odata=verbose` in the RAW field. This tells SP to return JSON, not XML!\r\nNow that you know the variable names, you're ready to create your Shockout form.\r\n\r\n###SP Field Metadata\r\n* Shockout assigns metadata properties to all of your list fields.\r\n\r\n    * `_koName` - (String) - the Knockout variable name\r\n    * `_name` - (String) the internal name of the SP field\r\n    * `_choices` - (Array) if the field is a choice or multichoice field, the field's choices \r\n    * `_description` (String) the decription of the SP field\r\n    * `_required` (Boolean) if the field is required or not\r\n    * `_readOnly` (Boolean) if the field is read-only or not\r\n    * `_format` (String) the standard name of the type of SP field: Text, Choice, Note, Computed, etc.\r\n\r\n###Displaying a SharePoint Text Field\r\n```\r\n<div class=\"form-group\">\r\n\t<label data-bind=\"text: MySpFieldName._displayName\" class=\"control-label\" for=\"MySpFieldName\"></label>\r\n\t\r\n\t<input type=\"text\" data-bind=\"value: MySpFieldName, attr:{'placeholder': MySpFieldName._displayName}\" maxlength=\"255\" id=\"MySpFieldName\" class=\"form-control\" />\r\n\t\r\n\t<!-- optional Field Description -->\r\n\t<p data-bind=\"text: MySpFieldName._description\"></p>\r\n</div>\r\n```\r\n\r\n###Displaying a SharePoint Checkbox Field (Boolean)\r\n```\r\n<div class=\"form-group\">\r\n\t<label class=\"checkbox\">\r\n        <input type=\"checkbox\" data-bind=\"checked: MySpFieldName\" />\r\n        <span data-bind=\"text: MySpFieldName._displayName\"></span>\r\n    </label>\r\n\r\n\t<!-- optional Field Description -->\r\n\t<p data-bind=\"text: MySpFieldName._description\"></p>\r\n</div>\r\n```\r\n\r\n###Displaying SharePoint Choice Fields - Select Menu\r\nHow to display the choices from a SharePoint Choice Field in a select menu.\r\n```\r\n<div class=\"form-group\">\r\n\t<label data-bind=\"text: MySpFieldName._displayName\" class=\"control-label\" for=\"MySpFieldName\"></label>\r\n\t\r\n\t<select data-bind=\"value: MySpFieldName, attr:{'placeholder': MySpFieldName._displayName}, options: MySpFieldName._choices, optionsValue: 'value', optionsCaption: '--SELECT--'\" id=\"MySpFieldName\" class=\"form-control\"></select>\r\n\r\n\t<!-- optional Field Description -->\r\n\t<p data-bind=\"text: MySpFieldName._description\"></p>\r\n</div>\r\n```\r\n\r\n###Displaying SharePoint MultiChoice Fields - Checkboxes\r\nHow to display the choices from a SharePoint MultiChoice Field with checkboxes.\r\n```\r\n<div class=\"form-group\">\r\n\t<label data-bind=\"text: MySpFieldName._displayName\" class=\"control-label\"></label>\r\n\t\t\t\t\r\n\t<!-- ko foreach: MySpFieldName._choices -->\r\n\t<label class=\"radio\">\r\n\t\t<input type=\"checkbox\" data-bind=\"checked: $root.MySpFieldName, attr: { value: $data.value }\" />\r\n\t\t<span data-bind=\"text: $data.value\"></span>\r\n\t</label>\r\n\t<!-- /ko -->   \r\n\t\t\t\t\t\r\n\t<!-- optional Field Description -->\r\n\t<p data-bind=\"text: MySpFieldName._description\"></p>          \r\n</div>\r\n\r\n```\r\n\r\n###Displaying SharePoint MultiChoice Fields - Radio Buttons\r\nHow to display the choices from a SharePoint MultiChoice Field with radio buttons.\r\n```\r\n<div class=\"form-group\">\r\n\t<label data-bind=\"text: MySpFieldName._displayName\" class=\"control-label\"></label>\r\n\t\t\t\t\r\n\t<!-- ko foreach: MySpFieldName._choices -->\r\n\t<label class=\"radio\">\r\n\t\t<input type=\"radio\" data-bind=\"checked: $root.MySpFieldName, attr: {value: $data.value}\" name=\"MySpFieldName\" />\r\n\t\t<span data-bind=\"text: $data.value\"></span>\r\n\t</label>\r\n\t<!-- /ko -->   \r\n\t\t\t\t\t\r\n\t<!-- optional Field Description -->\r\n\t<p data-bind=\"text: MySpFieldName._description\"></p>          \r\n</div>\r\n\r\n```\r\n     \r\n\r\n\r\n###Multiple Persons (UserMulti)\r\n####A Control with Multiple User Accounts\r\n\r\n```\r\n<!-- in markup -->\r\n<div class=\"row\">\r\n\t<div class=\"col-md-6 col-xs-6\">\r\n\t\t<input type=\"text\" data-bind=\"spPerson: person\" />\r\n\t\t<button class=\"btn btn-success\" data-bind=\"click: addPerson, attr: {'disabled': person() == null}\"><span>Add</span></button> \t\t\r\n\t</div>\t\r\n</div>\r\n\r\n<!-- ko foreach: People -->\r\n<div class=\"row\">\r\n\t<div class=\"col-md-10 col-xs-10\" data-bind=\"spPerson: $data\"></div>\r\n\t<div class=\"col-md-2 col-xs-2\">\r\n\t\t<button class=\"btn btn-xs btn-danger\" data-bind=\"click: $root.removePerson\"><span class=\"glyphicon glyphicon-trash\"></span></button>\r\n\t</div>\r\n</div>\r\n<!-- /ko -->\r\n```\r\n\r\nIf `People` is a field in your SharePoint list, then:\r\n\r\n```\r\n// in preRender\r\n...\r\npreRender(spForm, vm){\r\n\r\n    // This is a temporary local variable to hold a person object.\r\n    // You will push this to the People observable array.\r\n\tvm.person = ko.observable(null);\r\n\t\r\n\t// add a person to KO object People\r\n\tvm.addPerson = function(model, ctrl){\r\n\t\tif(vm.People() == null){\r\n\t\t\tvm.People([]);\r\n\t\t}\r\n\t\t\r\n\t\tvm.People().push(vm.person());\r\n\t\tvm.People.valueHasMutated();\r\n\t\t\r\n\t\tvm.person(null);\r\n\t\treturn false;\r\n\t};\r\n\t\r\n\t// remove a person from KO object People\r\n\tvm.removePerson = function(person, event){\r\n\t\tvm.People.remove(person);\r\n\t\treturn false;\r\n\t}\r\n\r\n}\r\n...\r\n```\r\n\r\n##Required Field Validation\r\nSimply add the `required` attribute to required fields. Shockout will do the rest!\r\n\r\n##Knockout SharePoint Field Binding Handlers\r\nYou may use these binding handlers with any HTML element. Shockout will render the apporpriate content whether it's a static element such as a DIV, SPAN, etc. or an input field: INPUT, SELECT, and TEXTAREA.\r\n\t\r\n####data-sp-html\r\n```\r\n<textarea data-bind=\"value: Comments\" data-sp-html></textarea>\r\n``` \r\n\r\n####spPerson\r\nDisplays an auto-complete field with user name and email address as you type a user's first or last name in the field. The minimum number of characters is 3 before it will query the User Information List.\r\nSharePoint group names aren't supported at this time, but coming soon.\r\n```\r\n<input type=\"text\" data-bind=\"spPerson: myVar\" />\r\n<div data-bind=\"spPerson: myVar\"></div>\r\n```\r\n\r\n####spDate\r\nDisplays a date in MM/DD/YYYY format.\r\n```\r\n<input type=\"text\" data-bind=\"spDate: myVar\" />\r\n<div data-bind=\"spDate: myVar\"></div>\r\n```\r\n\r\n####spDateTime\r\nDisplays a date/time in MM/DD/YYYY HH:MMM TT format.\r\n```\r\n<input type=\"text\" data-bind=\"spDateTime: myVar\" />\r\n<div data-bind=\"spDateTime: myVar\"></div>\r\n```\r\n\r\n####spMoney\r\nDisplays currency in USD. Negative values are displayed in red and enclosed in parenthesis `()`. Other currency symbols coming soon.\r\n```\r\n<input type=\"text\" data-bind=\"spMoney: myVar\" />\r\n<div data-bind=\"spMoney: myVar\"></div>\r\n```\r\n\r\n####spDecimal\r\nDisplays number with 2 decimal places. Negative values are displayed in red. You can change the decmial places with the precision attribute.\r\n```\r\n<input type=\"text\" data-bind=\"spDecimal: myVar, precision: 2\" />\r\n<div data-bind=\"spDecimal: myVar, precision: 2\"></div>\r\n```\r\n\r\n####spNumber\r\nDisplays integer/whole number. Negative values are displayed in red.\r\n```\r\n<input type=\"text\" data-bind=\"spNumber: myVar\" />\r\n<div data-bind=\"spNumber: myVar\"></div>\r\n```\r\n\r\n##Element Attributes\r\n\r\n####data-author-only\r\nRestricts element to authors only where `currentUser.id == listItem.CreatedById`. Removes from DOM otherwise.\r\nUseful for restricting edit fields to the person that created the form.\r\n```\r\n<section data-author-only></section>\r\n```\r\n\r\n####data-non-authors\r\nRestricts element to non-authors of a form. Removes from DOM otherwise. \r\nUseful for displaying read-only/non-edit sections to non-authors only.\r\n```\r\n<section data-non-authors></section>\r\n```\r\n\r\n####data-edit-only\r\nOnly renders an element when there's an ID in the querystring - an existing form. Removes from DOM otherwise. \r\nUseful for sections that require another person's input (such as comment and approval sections) on an existing form.\r\n```\r\n<section data-edit-only></section>\r\n```\r\n\r\n####data-new-only\r\nOnly renders an element when there is NO ID in the querystring - a new form. Removes from DOM otherwise.\r\n```\r\n<section data-new-only></section>\r\n```\r\n\r\n####data-sp-groups\r\nOnly renders an element for users belonging to the specified SharePoint user groups. Removes from DOM otherwise.\r\nUseful for restricting access to manager approval sections and fields.\r\n// Value is a comma delimitted list of user group IDs and names: `<groupId>;#<groupName>`. Shockout SPForms will first try to match on group ID and then the group name.\r\n```\r\n// Example:\r\n<section data-sp-groups=\"1;#Administrators,2;#Managers\"></section>\r\n```\r\n\r\nFor approval sections, you can combine these attributes:\r\n```\r\n<section data-edit-only data-sp-groups=\"1;#Administrators,2;#Managers\"></section>\r\n```\r\nThis element will be rendered for users who belong to the SP user groups specified and only when there is an ID in the querystring of the form URL. \r\n\r\n##Form Events\r\nYou may further customize your form by adding extra functionality within the appropriate event methods. \r\nYou specify the code for these methods in the third parameter of the constructor - the options object.\r\n\r\n####preRender()\r\n```\r\npreRender: function(spForm){\r\n\t// Run custom code here BEFORE the form is rendered and BEFORE the Knockout view model is bound.\r\n\t// Useful for adding custom markup and/or custom local Knockout variables to your form.\r\n\t// Shockout will know the difference between your variables and the ones that exist in your SharePoint list.\r\n}\r\n```\r\n\r\n####postRender()\r\n```\r\npostRender: function(spForm){\r\n\t// Run custom code here AFTER the form is rendered and AFTER the Knockout view model is bound.\r\n\t// Useful for:\r\n\t//\t- setting default values for your Knockout objects\r\n\t//\t- using JSON.parse() to convert string data stored in a text field to JSON - think tables in InfoPath but with JSON instead of XML!\r\n}\r\n```\r\n\r\n####preSave()\r\n```\r\npreSave: function(spForm){\r\n\t// Run code before the form is saved.\r\n\t// Useful for: \r\n\t//\t- implementing custom validation\r\n\t//\t- converting JSON data to a string with JSON.stringify(), which is saved in a plain text field.\r\n}\t\r\n```\r\n\r\n##Saving vs. Submitting Forms\r\nShockout includes a feature that allows your users to save their forms before submitting and triggering approval workflows. This is very useful for long forms - I know our users, especially managers, are interupted constantly \r\nand leave their forms open so long their sessions used to time out. \r\n\r\nTo enable this feature, you must: \r\n  * Have a field of type `boolean` named \"IsSubmitted\" in your form's list. \r\n  * Shockout will detect this field and render a 'Save' button next to the 'Submit' button.\r\n  * To prevent your approval workflows from triggering until the user presses the Submit button, include in the beginning of your workflows: \r\n\t\t```\r\n\t\tWait on 'IsSubmitted' to equal 'Yes'\r\n\t\t```   \r\n\r\n##Workflow History\r\nIf your form has one or more workflows, Shockout will display all logs from your site's Workflow History list at the bottom of your form. This is a very helpful feature for your users to track the status of their forms.\r\nThe Workflow History list is hidden by default and can be made visible a coupe of ways. You can view your site's Workflow History list at `http://<mysite.com>/Lists/Workflow%20History`.\r\n\r\nWarning: Workflow HIstory lists can qickly become full, exceeding your list threshold for non-admin users. Be sure to run regular maintenance to delete old list items. I use a PowerShell script which runs in the front-end server's Task Scheduler, nightly, to delete list items older than 6 months.\r\n\r\nThe option `includeWorkflowHistory` is `true` by default but you may override and set it to `false`. \r\n\r\nThe option `workflowHistoryListName` is \"Workflow History\" by default since all SharePoint sites feature this list. You may override this list name if you've created another custom workflow history list but it must be of the same list template.\r\n\r\n##Error Logging\r\nThis feature allows you to track and fix any errors your users experience. The default options are `enableErrorLog: true` and `errorLogListName: 'Error Log'`. \r\n\r\nYour Error Log list must be hosted on the root site and have 2 fields: \"Title\" (text) and \"Error\" (multiple lines of text - rich HTML). \r\n\r\nIt's recommended to set a workflow or an alert on this list to notify you as soon as an error is logged.   \r\n\r\n##Browser Compatibility\r\nShockout SPForms has been successfully tested with IE 9-11 and the latest versions of Chrome and FireFox.\r\n\r\n###Copyright\r\n\r\nCopyright (C) 2015  John T. Bonfardeci\r\n\r\nThis program is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Affero General Public License as\r\npublished by the Free Software Foundation, either version 3 of the\r\nLicense, or (at your option) any later version.\r\n\r\nThis program is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Affero General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Affero General Public License\r\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}